@mixin mx-print-css-vars($map, $prefix) {

	// print css variables
	@each $key, $value in $map {

		--#{$prefix}-#{$key}	: #{$value};

	}

}

@mixin mx-assign-css-vars($map, $prefix) {

	// assign css vars to properties
	@each $key, $value in $map {

		#{$key}	: var(--#{$prefix}-#{$key});

	}

}

@mixin mx-button {

	@include mx-print-css-vars((
		"font-size"			: fn-var($font-size),
		"border-radius"		: fn-var($border-radius),
		"color"				: fn-var($col-btn-default-text),
		"background-color"	: fn-var($col-btn-default-color),
		"border-color"		: fn-var($col-btn-default-border),
		"height"			: fn-var($btn-height-base),
		"padding-inline"	: 1.5rem
	), btn);

	@include mx-assign-css-vars((
		"font-size"			: fn-var($font-size),
		"border-radius"		: fn-var($border-radius),
		"color"				: fn-var($col-btn-default-text),
		"background-color"	: fn-var($col-btn-default-color),
		"border-color"		: fn-var($col-btn-default-border),
		"height"			: fn-var($btn-height-base),
		"padding-inline"	: 1.5rem
	), btn);

	@include mx-outline;
	@include mx-d-flex-center($display: inline-flex);

	text-align				: center;

	border-width			: 1px;
	border-style			: solid;

	background-image		: none;
	text-decoration			: none;
	white-space				: pre;
	cursor					: pointer;

	@include mx-transition(color background-color border-color);

	&.xl {
		@include mx-print-css-vars((
			"height"			: calc(fn-var($btn-height-base) * 1.2),
			"padding-inline"	: 1.9rem,
			"font-size"			: fn-var($font-size-xl),
			"border-radius"		: fn-var($border-radius-xl)
		), btn);
	}
	&.lg {
		@include mx-print-css-vars((
			"height"			: calc(#{fn-var($btn-height-base)} * 1.1),
			"padding-inline"	: 1.8rem,
			"font-size"			: fn-var($font-size-lg),
			"border-radius"		: fn-var($border-radius-lg)
		), btn);
	}
	&.sm {
		@include mx-print-css-vars((
			"height"			: calc(#{fn-var($btn-height-base)} * 0.7),
			"padding-inline"	: 1.1rem,
			"font-size"			: fn-var($font-size-sm),
			"border-radius"		: fn-var($border-radius-sm)
		), btn);
	}
	&.xs {
		@include mx-print-css-vars((
			"height"			: calc(#{fn-var($btn-height-base)} * 0.5),
			"padding-inline"	: 0.5rem,
			"font-size"			: fn-var($font-size-xs),
			"border-radius"		: fn-var($border-radius-xs)
		), btn);
	}

	&:hover {

		@include mx-print-css-vars(("background-color": fn-var($col-btn-default-color-hover)), btn);

	}

	&:active {

		@include mx-print-css-vars(("background-color": fn-var($col-btn-default-color-active)), btn);

	}

	&[data-before],
	&[data-after] {

		padding-inline: calc(var(--btn-padding-inline) * 0.7);

	}

	&[data-before]::before,
	&[data-after]::after {

		@include mx-d-inline-block;
		@include mx-font-size-inherit;
		@include mx-mx-xxs;

	}
	&[data-before]::before { content: attr(data-before); }
	&[data-after]::after { content: attr(data-after); }

	&[disabled] {

		@include mx-print-css-vars((
			"color"						: fn-var($col-btn-disabled-text) !important,
			"background-color"			: fn-var($col-btn-disabled-color) !important,
			"background-color-hover"	: fn-var($col-btn-disabled-color-hover) !important,
			"background-color-active"	: fn-var($col-btn-disabled-color-active) !important,
			"border-color"				: fn-var($col-btn-disabled-border) !important
		), btn);

		cursor	: not-allowed;

		&:active {

			outline		: none;
			box-shadow	: none;

		}

	}

	&.warn {

		@include mx-print-css-vars((
			"text-color"		: fn-var($col-btn-warn-text),
			"background-color"	: fn-var($col-btn-warn-color),
			"border-color"		: fn-var($col-btn-warn-border)
		), btn);

		&:hover {

			@include mx-print-css-vars(("background-color": fn-var($col-btn-warn-color-hover)), btn);

		}

		&:active {

			@include mx-print-css-vars(("background-color": fn-var($col-btn-warn-color-active)), btn);

		}

	}

	&.danger {

		@include mx-print-css-vars((
			"color"				: fn-var($col-btn-danger-text),
			"background-color"	: fn-var($col-btn-danger-color),
			"border-color"		: fn-var($col-btn-danger-border)
		), btn);

		&:hover {

			@include mx-print-css-vars(("background-color": fn-var($col-btn-danger-color-hover)), btn);

		}

		&:active {

			@include mx-print-css-vars(("background-color": fn-var($col-btn-danger-color-active)), btn);

		}

	}

	&.link {

		@include mx-print-css-vars((
			"color"				: fn-var($col-btn-link-text),
			"background-color"	: fn-var($col-btn-link-color),
			"border-color"		: fn-var($col-btn-link-border)
		), btn);

		&:hover {

			&:not(:has(#{$glyph-selector})),
			&[data-before]::before,
			&[data-after]::after {

				text-decoration: underline;

			}

		}

	}

	&.tag {

		@include mx-print-css-vars((
			"color"				: fn-var($col-btn-tag-text),
			"background-color"	: fn-var($col-btn-tag-color),
			"border-radius" 	: fn-var($border-radius-round),
			"height"			: calc(fn-var($btn-height-base) * 0.6), // 2.6 default fs 12px, 2.2 small , 1.8 xs
			"font-size"			: fn-var($font-size-sm)
		), btn);

		border				: 1px solid transparent;
		line-height			: 1.2;
		min-width			: 1rem;
		padding-inline		: calc(var(--btn-padding-inline) * 0.5);

		&:hover {

			@include mx-print-css-vars(("background-color": fn-var($col-btn-tag-color-hover)), btn);

		}

		&:active {

			@include mx-print-css-vars(("background-color": fn-var($col-btn-tag-color-active)), btn);

		}

		&.sm {

			@include mx-print-css-vars((
				"height"			: calc(fn-var($btn-height-base) * 0.5),
				"font-size"			: fn-var($font-size-sm)
			), btn);

		}

		&.xs {

			@include mx-print-css-vars((
				"height"	: calc(fn-var($btn-height-base) * 0.4),
				"font-size"	: fn-var($font-size-xs)
			), btn);

		}

	}

	&.glyph {

		@include mx-print-css-vars((
			"color"				: fn-var($col-btn-glyph-text),
			"background-color"	: fn-var($col-btn-glyph-color),
			"border-radius" 	: fn-var($border-radius-round)
		), btn);

		border				: $zero;
		width				: var(--btn-height);

		&:hover {

			@include mx-print-css-vars(("background-color": fn-var($col-btn-glyph-color-hover)), btn);

		}

		&:active {

			@include mx-print-css-vars(("background-color": fn-var($col-btn-glyph-color-active)), btn);

		}

	}

}

button,
.button {

	@include mx-button;

}
